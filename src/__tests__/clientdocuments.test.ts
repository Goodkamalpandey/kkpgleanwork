/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Client Documents Getdocpermissions", async () => {
  const testHttpClient = createTestHTTPClient("getdocpermissions");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.documents.retrievePermissions({});
  expect(result).toBeDefined();
});

test("Client Documents Getdocuments", async () => {
  const testHttpClient = createTestHTTPClient("getdocuments");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.documents.retrieve();
  expect(result).toBeDefined();
});

test("Client Documents Getdocumentsbyfacets", async () => {
  const testHttpClient = createTestHTTPClient("getdocumentsbyfacets");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.documents.retrieveByFacets({
    filterSets: [
      {
        filters: [
          {
            fieldName: "type",
            values: [
              {
                value: "Spreadsheet",
                relationType: "EQUALS",
              },
              {
                value: "Presentation",
                relationType: "EQUALS",
              },
            ],
          },
        ],
      },
      {
        filters: [
          {
            fieldName: "type",
            values: [
              {
                value: "Spreadsheet",
                relationType: "EQUALS",
              },
              {
                value: "Presentation",
                relationType: "EQUALS",
              },
            ],
          },
        ],
      },
    ],
  });
  expect(result).toBeDefined();
});

it.skip("Client Documents Getdocumentanalytics", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step getdocumentanalytics.test referencing operation getdocumentanalytics not found in document`]",
  );
});
